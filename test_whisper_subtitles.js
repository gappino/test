#!/usr/bin/env node
/**
 * Test script for Whisper subtitle generation
 * This script tests the Whisper transcription with timestamps
 */

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

const BASE_URL = 'http://localhost:3003';

async function testWhisperSubtitles() {
  console.log('🧪 Testing Whisper Subtitle Generation');
  console.log('=' .repeat(50));
  
  try {
    // First, generate some test audio using Kokoro TTS
    console.log('🎤 Step 1: Generating test audio with Kokoro TTS...');
    
    const ttsResponse = await fetch(`${BASE_URL}/api/kokoro/text-to-speech`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: "Hello, this is a test of the subtitle generation system. We are testing how well Whisper can transcribe this audio and create accurate timestamps for subtitles.",
        voice: 'af_heart'
      })
    });

    if (!ttsResponse.ok) {
      const errorText = await ttsResponse.text();
      throw new Error(`TTS failed: ${errorText}`);
    }

    const ttsResult = await ttsResponse.json();
    console.log('✅ Audio generated successfully');
    console.log(`   Audio URL: ${ttsResult.data.audio_url}`);
    console.log(`   Duration: ${ttsResult.data.duration} seconds`);
    console.log(`   Text: ${ttsResult.data.text}`);
    
    // Now test Whisper transcription
    console.log('\n🎤 Step 2: Testing Whisper transcription with timestamps...');
    
    const whisperResponse = await fetch(`${BASE_URL}/api/whisper/transcribe-with-timestamps`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        audioUrl: ttsResult.data.audio_url,
        language: 'en'
      })
    });

    if (!whisperResponse.ok) {
      const errorText = await whisperResponse.text();
      throw new Error(`Whisper failed: ${errorText}`);
    }

    const whisperResult = await whisperResponse.json();
    console.log('✅ Whisper transcription completed');
    console.log(`   Success: ${whisperResult.success}`);
    console.log(`   Text: ${whisperResult.data.text}`);
    console.log(`   Language: ${whisperResult.data.language}`);
    console.log(`   Segments: ${whisperResult.data.segments ? whisperResult.data.segments.length : 0}`);
    
    if (whisperResult.data.segments && whisperResult.data.segments.length > 0) {
      console.log('\n📝 Subtitle segments:');
      whisperResult.data.segments.forEach((segment, index) => {
        console.log(`   ${index + 1}. "${segment.text}" (${segment.start}s - ${segment.end}s)`);
      });
      
      // Test SRT generation
      console.log('\n📄 Testing SRT subtitle generation...');
      const srtContent = generateSRT(whisperResult.data.segments);
      console.log('SRT Content:');
      console.log(srtContent);
      
      // Save SRT file for testing
      const srtPath = path.join(__dirname, 'test_subtitles.srt');
      fs.writeFileSync(srtPath, srtContent, 'utf8');
      console.log(`\n💾 SRT file saved to: ${srtPath}`);
      
    } else {
      console.log('⚠️ No segments generated by Whisper');
    }
    
    console.log('\n🎉 Whisper subtitle test completed successfully!');
    
  } catch (error) {
    console.error('❌ Test failed:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

function generateSRT(segments) {
  let srtContent = '';
  
  segments.forEach((segment, index) => {
    const startTime = formatSRTTime(segment.start);
    const endTime = formatSRTTime(segment.end);
    const text = segment.text.trim();
    
    srtContent += `${index + 1}\n`;
    srtContent += `${startTime} --> ${endTime}\n`;
    srtContent += `${text}\n\n`;
  });
  
  return srtContent;
}

function formatSRTTime(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  const milliseconds = Math.floor((seconds % 1) * 1000);
  
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')},${milliseconds.toString().padStart(3, '0')}`;
}

// Run the test
if (require.main === module) {
  testWhisperSubtitles();
}

module.exports = { testWhisperSubtitles };



